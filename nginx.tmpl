# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=docker_cache:10m max_size=1g inactive=60m use_temp_path=off;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
         '"$request" $status $body_bytes_sent '
         '"$http_referer" "$http_user_agent"';

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream {{ $host }} {
{{ range $index, $value := $containers }}
    {{ $addrLen := len $value.Addresses }}
    {{ $network := index $value.Networks 0 }}

    {{/* If only 1 port exposed, use that */}}
    {{ if eq $addrLen 1 }}
        {{ with $address := index $value.Addresses 0 }}
            # {{$value.Name}}
            server {{ $network.IP }}:{{ $address.Port }};
        {{ end }}

    {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
    {{ else if $value.Env.VIRTUAL_PORT }}
        {{ range $i, $address := $value.Addresses }}
            {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
              # {{$value.Name}}
              server {{ $network.IP }}:{{ $address.Port }};
            {{ end }}
        {{ end }}

    {{/* Else default to standard web port 80 */}}
    {{ else }}
        {{ range $i, $address := $value.Addresses }}
            {{ if eq $address.Port "80" }}
              # {{$value.Name}}
              server {{ $network.IP }}:{{ $address.Port }};
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}
}

{{ $gen_serv_block := or (first (groupByKeys $containers "Env.GENERATE_SERVER_BLOCK")) "false" }}

{{ $custom_config_definition := or (first (groupByKeys $containers "Env.CUSTOM_CONFIG_NAME")) "" }}

{{ $max_upload_size := or (first (groupByKeys $containers "Env.HTTP_MAX_CLIENT_REQUEST_SIZE")) "default" }}

{{ if (and (ne $custom_config_definition "") (exists (printf "/etc/nginx/sites-available/%s" $custom_config_definition))) }}
include /etc/nginx/sites-available/{{ $custom_config_definition }};
{{ end }}

{{ if (ne $gen_serv_block "false") }}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.pem" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".pem" "" -1 }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

{{ $proxy_type := or (first (groupByKeys $containers "Env.PROXY_PROTO")) "http" }}

{{ if (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.pem" $cert))) }}

server {
    server_name {{ $host }};
    listen 80;
    listen [::]:80;

    return 301 https://$host$request_uri;
}

server {
    server_name {{ $host }};
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0

    ssl_prefer_server_ciphers on;
    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:10m;

    {{ if (ne $max_upload_size "default")}}client_max_body_size {{ $max_upload_size }};{{ end }}

    ssl_certificate /etc/nginx/certs/{{ (printf "%s.pem" $cert) }};
    ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.pem" $cert) }};

    add_header Strict-Transport-Security "max-age=63072000; preload";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
    include {{ printf "/etc/nginx/vhost.d/%s" $host }};
    {{ end }}

    location /.well-known/acme-challenge {
        rewrite ^/.well-known/acme-challenge/(.*)$ /acme-challenge-responder/$1 break;
        proxy_set_header X-Original-Host $host;
        proxy_pass http://certs.technowizardry.net;
    }

    location / {
{{ if (eq $proxy_type "http") }}
        proxy_pass {{ $proto }}://{{ $host }};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
        proxy_set_header HTTPS on;
        proxy_set_header Host $http_host;
        proxy_next_upstream error timeout invalid_header http_500;
        proxy_next_upstream_tries 1;
        proxy_connect_timeout 2;
        proxy_http_version 1.1;
        proxy_hide_header X-Content-Type-Options;
        proxy_hide_header X-Frame-Options;
        proxy_hide_header X-Request-Id;
        proxy_hide_header X-Runtime;
{{ else }}
        include fastcgi_params;
        fastcgi_pass {{ $host }};
{{ end }}
        proxy_cache docker_cache;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_revalidate on;
        proxy_cache_lock on;
        {{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
        auth_basic      "Restricted {{ $host }}";
        auth_basic_user_file    {{ (printf "/etc/nginx/htpasswd/%s" $host) }};
        {{ end }}
    }
}
{{ else }}

server {
    server_name {{ $host }};
    listen 80;
    listen [::]:80;

    {{ if (ne $max_upload_size "default")}}client_max_body_size {{ $max_upload_size }};{{ end }}

    {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
    include {{ printf "/etc/nginx/vhost.d/%s" $host }};
    {{ end }}

    location /.well-known/acme-challenge {
        rewrite ^/.well-known/acme-challenge/(.*)$ /acme-challenge-responder/$1 break;
        proxy_set_header X-Original-Host $host;
        proxy_pass https://certs.technowizardry.net;
    }

    location / {
{{ if (eq $proxy_type "http") }}
        proxy_pass {{ $proto }}://{{ $host }};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
{{ else }}
        include fastcgi_params;
        fastcgi_pass {{ $host }};
{{ end }}
        proxy_cache docker_cache;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_revalidate on;
        proxy_cache_lock on;
        {{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
        auth_basic      "Restricted {{ $host }}";
        auth_basic_user_file    {{ (printf "/etc/nginx/htpasswd/%s" $host) }};
        {{ end }}
    }
}

{{ end }}
{{ end }}
{{ end }}
